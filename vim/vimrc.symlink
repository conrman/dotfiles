" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible


" ================ General Config ================

let mapleader = "\\"

syntax on
set autoread          " Refresh files
set autochdir         " Change working directory to match open buffer
set autowrite         " Automatically :write before running commands
set backspace=2       " Backspace deletes like most programs in insert mode
set hidden            " No need to overwrite!
set history=100       " Keep more info in memory
set laststatus=2      " Always display the status line
set nowrap            " No wrapping text
set mouse=a           " Enable mouse
set ruler             " Show the cursor position all the time
set visualbell        " No sounds
set noea              " I can resize splits my damn self

" ================ Backups/Swaps ================

set nobackup          " Don't forget to save!
set noswapfile        " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set nowritebackup     " Don't make a backup before overwriting a file


" ================ Scrolling ================

set scrolloff=8       " Keep cursor away from top/bottom edge of window
set sidescroll=1      " Amount to scroll horizontally when going off the screen
set sidescrolloff=8   " Keep cursor away from left/right edge of window


" ================ Command Prompt ================

set showcmd           " Display incomplete commands

" Set the command window height to 2 lines,
" to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2


" ================ Mappings  ================

" Lazy Ex commands
nnoremap ; :

" Quit like a winner
nnoremap <leader>q :q<CR>

" Delete without yanking to register
nnoremap <leader>d "_d
vnoremap <leader>d "_d
vnoremap <leader>p "_dP

" Easy commenting
nnoremap // :TComment<CR>
vnoremap // :TComment<CR>


" ================ Line Numbers ================

set number
set numberwidth=5
set relativenumber
set cursorline        " Highlight current line


" ================ Search ================

set hlsearch          " Better search
set incsearch         " Do incremental searching
set ignorecase        " Ignore case when searching...
set smartcase         " ...unless we type a captial

" Clear hightlights
nnoremap <F3> :set hlsearch!<CR>


" ================ Folds ============================

" set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default

" ================ Buffers ================

" Show bufferlist
nnoremap <leader>b :ls<CR>:b<space>

" Set current working directory to match the buffer
autocmd BufEnter * silent! lcd %:p:h

" Remove whitespaces on save
autocmd BufWritePre * :%s/\s\+$//e

" Switch between the last two files
nnoremap <leader><leader> <c-^>


" ================ Indentation ================

set cindent
set tabstop=4
set shiftwidth=4
set shiftround
set expandtab
autocmd FileType php setlocal shiftwidth=4 tabstop=4


" ================ Splits ================

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright
set diffopt+=vertical " Always use vertical diffs


" ================ Movement ================

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Exit insert mode center stage
imap fj <esc>
imap jf <esc>
imap jj <esc>


" ================ Completion ================

set wildmode=list:longest
set wildmenu                      "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~       "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>


" ================ Saving ================

" Save on [enter]
function! s:RemapEnter()
   if empty(&buftype)
      nnoremap <buffer> <CR> :w<CR>
   else
      silent! nunmap <buffer> <CR>
   end
endf
autocmd BufReadPost * call s:RemapEnter()


" ================ Plugins ================

call plug#begin('~/.vim/autoload')

" Define bundles via Github repos
" Plug 'chriskempson/base16-vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'scrooloose/syntastic'
Plug 'vim-scripts/tComment'
Plug 'itchyny/lightline.vim'
Plug 'https://github.com/majutsushi/tagbar.git'
" Plug 'ervandew/supertab'
Plug 'othree/html5.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'mattn/emmet-vim'
Plug 'danro/rename.vim'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
" Plug 'mattn/webapi-vim'
" Plug 'mattn/gist-vim'
Plug 'posva/vim-vue'
Plug 'vim-scripts/CursorLineCurrentWindow'
Plug 'morhetz/gruvbox'
" Plug 'ap/vim-buftabline'
Plug 'honza/vim-snippets'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'jwalton512/vim-blade'
Plug 'metakirby5/codi.vim'
" Plug 'vim-php/vim-composer'
Plug 'StanAngeloff/php.vim'
" Plug 'joonty/vim-phpunitqf'
Plug 'terryma/vim-multiple-cursors'
" Plug 'scrooloose/nerdtree'
Plug 'stephpy/vim-php-cs-fixer'
" Plug 'SirVer/ultisnips'
" Plug 'tobyS/vmustache'
" Plug 'tobyS/pdv'
Plug 'shawncplus/phpcomplete.vim'
Plug 'junegunn/vim-slash'
Plug 'airblade/vim-gitgutter'
Plug 'KabbAmine/gulp-vim'
Plug 'pangloss/vim-javascript'
Plug 'tmux-plugins/vim-tmux'
Plug 'christoomey/vim-tmux-navigator'
Plug 'ryanoasis/vim-devicons'
" Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'bagrat/vim-workspace'
Plug 'JamshedVesuna/vim-markdown-preview'

if filereadable(expand("~/.vimrc.bundles.local"))
  source ~/.vimrc.bundles.local
endif

call plug#end()

filetype plugin indent on

" ================ Markdown ================

let vim_markdown_preview_toggle=1
let vim_markdown_preview_github=1
let vim_markdown_preview_hotkey='<C-m>'
let vim_markdown_preview_browser='Google Chrome'

" ================ Workspace ================

let g:workspace_use_devicons = 1
noremap <Tab> :WSNext<CR>
noremap <S-Tab> :WSPrev<CR>
noremap <Leader><Tab> :WSClose<CR>
noremap <Leader><S-Tab> :WSClose!<CR>
noremap <C-t> :WSTabNew<CR>

cabbrev bonly WSBufOnly

" ================ Deoplete ================

let g:deoplete#enable_at_startup=1

" ================ PHP ================

let g:pdv_template_dir = $HOME ."/.vim/bundle/pdv/templates_snip"
nnoremap <buffer> <C-'> :call pdv#DocumentWithSnip()<CR>

" Better docblock syntax highlighting
function! PhpSyntaxOverride()
  hi! def link phpDocTags  phpDefine
  hi! def link phpDocParam phpType
endfunction

augroup phpSyntaxOverride
  autocmd!
  autocmd FileType php call PhpSyntaxOverride()
augroup END

" ================ Gist ================

" Setup github account config for webapi-vim
let g:gist_use_password_in_gitconfig = 1


" ================ NERDTree ================

" Open NERDTree
nmap <leader>r :NERDTreeToggle<CR>

let NERDTreeShowHidden=1


" ================ Tagbar ================

" Open tagbar panel
nmap <leader>t :TagbarToggle<CR>

let g:tagbar_status_func = 'TagbarStatusFunc'

function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
  return lightline#statusline(0)
endfunction

let g:tagbar_type_css = {
      \ 'ctagstype' : 'Css',
      \ 'kinds'     : [
      \ 'c:classes',
      \ 's:selectors',
      \ 'i:identities'
      \ ]
      \ }

" ================ Syntastic ================

" Set checkers for syntastic:
let g:syntastic_javascript_checkers = ['eslint', 'jshint']
let g:syntastic_css_checkers = ['sasslint']
" let g:syntastic_python_checkers = ['pylint']j

" configure syntastic syntax checking to check on open as well as save
let g:syntastic_check_on_open=0
" let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
" let g:syntastic_eruby_ruby_quiet_messages = {"regex": "possibly useless use of a variable in void context"}

" Toggle Syntastic
nnoremap <F5> :SyntasticToggleMode<CR>

" ================ Emmet ================

let g:user_emmet_mode='a'
" let g:user_emmet_install_global = 0
" autocmd FileType html,css EmmetInstall


" ================ Lightline ================
let g:lightline = {
      \ 'colorscheme': 'gruvbox',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename'], ['ctrlpmark'] ],
      \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightLineFugitive',
      \   'filename': 'LightLineFilename',
      \   'fileformat': 'MyFileformat',
      \   'filetype': 'MyFiletype',
      \   'fileencoding': 'LightLineFileencoding',
      \   'mode': 'LightLineMode',
      \   'ctrlpmark': 'CtrlPMark',
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ },
      \ 'separator': { 'left': '░', 'right': '░' },
      \ 'subseparator': { 'left': '| ', 'right': ' |' }
      \ }


function! LightLineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightLineReadonly()
  return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! LightLineFilename()
  let fname = expand('%:t')
  return fname == 'ControlP' ? g:lightline.ctrlp_item :
        \ fname == '__Tagbar__' ? g:lightline.fname :
        \ fname =~ '__Gundo\|NERD_tree' ? '' :
        \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
        \ &ft == 'unite' ? unite#get_status_string() :
        \ &ft == 'vimshell' ? vimshell#get_status_string() :
        \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ ('' != fname ? fname : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

function! LightLineFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let _ = fugitive#head()
      return strlen(_) ? mark._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  let fname = expand('%:t')
  return fname == '__Tagbar__' ? 'Tagbar' :
        \ fname == 'ControlP' ? 'CtrlP' :
        \ fname == '__Gundo__' ? 'Gundo' :
        \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ &ft == 'unite' ? 'Unite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP'
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:ctrlp_status_func = {
  \ 'main': 'CtrlPStatusFunc_1',
  \ 'prog': 'CtrlPStatusFunc_2',
  \ }

let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction


augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost *.c,*.cpp call s:syntastic()
augroup END
function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0

" ================ NeoVim ================

if has('nvim')
  " True colors
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  set termguicolors

  " Blinky cursor
  " let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
  " insert mode - line
  " let &t_SI .= "\<Esc>[5 q"
  "replace mode - underline
  " let &t_SR .= "\<Esc>[4 q"
  "common - block
  " let &t_EI .= "\<Esc>[3 q"

  " Exit terminal mode.
  tnoremap <leader>e <C-\><C-n>

  " Make a terminal split
  command! -nargs=* Spt :8sp term://zsh
  command! -nargs=* Vspt vsp term://zsh

  " Better scrolling
  set lazyredraw
endif


" ================ Color Scheme ================
set background=dark
set guifont=Knack\ Nerd\ Font\ Complete:h14
set encoding=utf8
colorscheme gruvbox

" ================ Buftabline ================

" Change background color
" hi TabLineFill cterm=bold guifg=#333333 guibg=#282a36
" hi Tabline cterm=italic ctermfg=231 ctermbg=241 guifg=#666666 guibg=#282a36
" hi TabLineFill cterm=bold ctermfg=13 guifg=#fa0a92 guibg=#666666
"
" hi BufTabLineFill cterm=bold ctermfg=13 guifg=#fa0a92 guibg=#44475a
" hi BufTabLineCurrent cterm=bold ctermfg=13 guifg=#fa0a92 guibg=#44475a
" hi BufTabLineActive cterm=bold ctermfg=13 guifg=#fa0a92 guibg=#44475a


" ================ Local overwrites  ================

if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif
