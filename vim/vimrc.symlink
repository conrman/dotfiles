" Leader
let mapleader = "\\"

" ===== Plugins =====

call plug#begin('~/.vim/autoload')

" Define bundles via Github repos
Plug 'chriskempson/base16-vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'pbrisbin/vim-mkdir'
Plug 'scrooloose/syntastic'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'vim-scripts/tComment'
Plug 'itchyny/lightline.vim'
Plug 'https://github.com/majutsushi/tagbar.git'
Plug 'https://github.com/ervandew/supertab'
Plug 'https://github.com/othree/html5.vim'
Plug 'https://github.com/jiangmiao/auto-pairs'
Plug 'https://github.com/mattn/emmet-vim'
Plug 'https://github.com/danro/rename.vim'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'https://github.com/tpope/vim-surround'
Plug 'https://github.com/tpope/vim-unimpaired'
Plug 'https://github.com/tpope/vim-vinegar'
Plug 'https://github.com/tpope/vim-abolish'
Plug 'https://github.com/tpope/vim-unimpaired'
Plug 'https://github.com/tpope/vim-repeat'
Plug 'mattn/webapi-vim'
Plug 'mattn/gist-vim'

if filereadable(expand("~/.vimrc.bundles.local"))
  source ~/.vimrc.bundles.local
endif

if has('nvim')
  Plug 'dylanaraps/taskrunner.nvim'
endif


call plug#end()


" ===== Setup =====

syntax on
set autochdir     " Change working directory to match open buffer
set autowrite     " Automatically :write before running commands
set backspace=2   " Backspace deletes like most programs in insert mode
set hidden
set history=100   " Keep more info in memory
set hlsearch      " Better search
set incsearch     " Do incremental searching
set laststatus=2  " Always display the status line
set nobackup      "
set noswapfile    " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set nowritebackup "
set nowrap
set mouse=a       " Enable mouse
set ruler         " Show the cursor position all the time
set showcmd       " Display incomplete commands
set scrolloff=8   " Keep cursor away from top/bottom edge of window
set sidescroll=1
set sidescrolloff=8


" Set current working directory to match the buffer
autocmd BufEnter * silent! lcd %:p:h


" Remove whitespaces on save
autocmd BufWritePre * :%s/\s\+$//e


" Indentation
set cindent
filetype plugin indent on


" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright


" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab


" Make it obvious where 80 characters is
" set textwidth=80


" Numbers
set number
set relativenumber
set numberwidth=5


" Always use vertical diffs
set diffopt+=vertical



" ===== Remaps ======


" Cancel search with Esc
nnoremap <silent> <Esc> :nohlsearch<Bar>:echo<CR>


" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l


" Exit insert mode center stage
imap fj <esc>
imap jf <esc>


" Show bufferlist
nnoremap <leader>b :ls<CR>:b<space>


" Clear hightlights
nnoremap <F3> :set hlsearch!<CR>


" Delete without yanking
nnoremap <leader>d "_d
vnoremap <leader>d "_d
vnoremap <leader>p "_dP


" Quit like a winner
nnoremap <leader>q :q<CR>


" Switch between the last two files
nnoremap <leader><leader> <c-^>


" Easy commenting
nnoremap // :TComment<CR>
vnoremap // :TComment<CR>


" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>


" ====== Configurations ======

" Setup github account config for webapi-vim
let g:gist_use_password_in_gitconfig = 1


" Allow JSX in normal js files
" let g:jsx_ext_required = 0

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2


" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>


" Save on Enter
function! s:RemapEnter()
   if empty(&buftype)
      nnoremap <buffer> <CR> :w<CR>
   else
      silent! nunmap <buffer> <CR>
   end
endf
autocmd BufReadPost * call s:RemapEnter()



" ====== NERDTree ======
nmap <leader>r :NERDTreeToggle<CR>
map <leader>f :NERDTreeFind<CR>

" Close vim when a file is closed and NERDTree is the last open window
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif


" ====== Tagbar ======
nmap <leader>t :TagbarToggle<CR>

let g:tagbar_status_func = 'TagbarStatusFunc'

function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
  return lightline#statusline(0)
endfunction

let g:tagbar_type_css = {
      \ 'ctagstype' : 'Css',
      \ 'kinds'     : [
      \ 'c:classes',
      \ 's:selectors',
      \ 'i:identities'
      \ ]
      \ }


" ======== Syntastic settings ========

" Set checkers for syntastic:
" let g:syntastic_javascript_checkers = ['eslint', 'jshint']
" let g:syntastic_css_checkers = ['csslint']
" let g:syntastic_python_checkers = ['pylint']j

" configure syntastic syntax checking to check on open as well as save
" let g:syntastic_check_on_open=1
" let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
" let g:syntastic_eruby_ruby_quiet_messages = {"regex": "possibly useless use of a variable in void context"}


" ===== Emmet =====
let g:user_emmet_mode='a'
" let g:user_emmet_install_global = 0
" autocmd FileType html,css EmmetInstall


" ===== Lightline =====
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename'], ['ctrlpmark'] ],
      \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightLineFugitive',
      \   'filename': 'LightLineFilename',
      \   'fileformat': 'LightLineFileformat',
      \   'filetype': 'LightLineFiletype',
      \   'fileencoding': 'LightLineFileencoding',
      \   'mode': 'LightLineMode',
      \   'ctrlpmark': 'CtrlPMark',
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ },
      \ 'separator': { 'left': '░', 'right': '░' },
      \ 'subseparator': { 'left': ' ', 'right': ' ' }
      \ }


function! LightLineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightLineReadonly()
  return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! LightLineFilename()
  let fname = expand('%:t')
  return fname == 'ControlP' ? g:lightline.ctrlp_item :
        \ fname == '__Tagbar__' ? g:lightline.fname :
        \ fname =~ '__Gundo\|NERD_tree' ? '' :
        \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
        \ &ft == 'unite' ? unite#get_status_string() :
        \ &ft == 'vimshell' ? vimshell#get_status_string() :
        \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ ('' != fname ? fname : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let _ = fugitive#head()
      return strlen(_) ? mark._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  let fname = expand('%:t')
  return fname == '__Tagbar__' ? 'Tagbar' :
        \ fname == 'ControlP' ? 'CtrlP' :
        \ fname == '__Gundo__' ? 'Gundo' :
        \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ &ft == 'unite' ? 'Unite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP'
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:ctrlp_status_func = {
  \ 'main': 'CtrlPStatusFunc_1',
  \ 'prog': 'CtrlPStatusFunc_2',
  \ }

let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction


augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost *.c,*.cpp call s:syntastic()
augroup END
function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0


" Local config
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif


" NeoVim specific
if has('nvim')
  " Exit terminal mode.
  tnoremap <leader>e <C-\><C-n>

  " Make a terminal split
  command! -nargs=* Spt :sp term://zsh
  command! -nargs=* Vspt vsp term://zsh
endif


" Color Scheme
let base16colorspace=256
set background=dark
colorscheme base16-eighties
