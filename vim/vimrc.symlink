" Use moim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" ================ General Config ================

let mapleader = "\\"

syntax on
set autoread          " Refresh files
set autochdir         " Change working directory to match open buffer
set autowrite         " Automatically :write before running commands
set backspace=2       " Backspace deletes like most programs in insert mode
set hidden            " No need to overwrite!
set history=100       " Keep more info in memory
set laststatus=2      " Always display the status line
set nowrap            " No wrapping text
set mouse=a           " Enable mouse
set ruler             " Show the cursor position all the time
set visualbell        " No sounds
set noea              " I can resize splits my damn self
set clipboard=unnamed
set t_Co=256

" ================ Backups/Swaps ================

set nobackup          " Don't forget to save!
set noswapfile        " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set nowritebackup     " Don't make a backup before overwriting a file


" ================ Scrolling ================

set scrolloff=8       " Keep cursor away from top/bottom edge of window
set sidescroll=1      " Amount to scroll horizontally when going off the screen
set sidescrolloff=8   " Keep cursor away from left/right edge of window


" ================ Command Prompt ================

set showcmd           " Display incomplete commands

" Set the command window height to 2 lines,
" to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2


" ================ Mappings  ================

" Lazy Ex commands
nnoremap ; :

" Quit like a winner
nnoremap <leader>q :q<CR>

" Delete without yanking to register
nnoremap <leader>d "_d
vnoremap <leader>d "_d
vnoremap <leader>p "_dP

" Easy commenting
nnoremap // :TComment<CR>
vnoremap // :TComment<CR>


" ================ Line Numbers ================

set number
set numberwidth=5
set relativenumber
set cursorline        " Highlight current line


" ================ Search ================

set hlsearch          " Better search
set incsearch         " Do incremental searching
set ignorecase        " Ignore case when searching...
set smartcase         " ...unless we type a captial

" Clear hightlights
nnoremap <F3> :set hlsearch!<CR>


" ================ Folds ============================

" set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default

" ================ Buffers ================

" Show bufferlist
" nnoremap <leader>b :ls<CR>:b<space>

" Set current working directory to match the buffer
" autocmd BufEnter * silent! lcd %:p:h

" Remove whitespaces on save
autocmd BufWritePre * :%s/\s\+$//e

" Switch between the last two files
nnoremap <leader><leader> <c-^>


" ================ Indentation ================

set cindent
set tabstop=4
set shiftwidth=4
set shiftround
set expandtab
autocmd FileType php setlocal shiftwidth=4 tabstop=4


" ================ Splits ================

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright
set dip=vertical " Always use vertical diffs


" ================ Movement ================

" Quicker window movement
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-h> <C-w>h
map <C-l> <C-w>l

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Exit insert mode center stage
imap fj <esc>
imap jf <esc>
imap jj <esc>


" ================ Completion ================

set wildmode=list:longest
set wildmenu                      "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~       "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>


" ================ Saving ================

" Save on [enter]
function! s:RemapEnter()
    if empty(&buftype)
        nnoremap <buffer> <CR> :w<CR>
    else
        silent! nunmap <buffer> <CR>
    end
endf
autocmd BufReadPost * call s:RemapEnter()


" ================ Plugins ================

call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : '~/.vim/plugged')

" Define bundles via Github repos
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-rooter'
Plug 'scrooloose/syntastic'
Plug 'vim-scripts/tComment'
Plug 'itchyny/lightline.vim'
Plug 'https://github.com/majutsushi/tagbar.git'
Plug 'othree/html5.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'mattn/emmet-vim'
Plug 'danro/rename.vim'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-obsession'
" Plug 'posva/vim-vue'
Plug 'leafOfTree/vim-vue-plugin'
Plug 'vim-scripts/CursorLineCurrentWindow'
Plug 'morhetz/gruvbox'
Plug 'jwalton512/vim-blade'
Plug 'metakirby5/codi.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'sjl/gundo.vim'
Plug 'scrooloose/nerdtree'
Plug 'unkiwii/vim-nerdtree-sync'
Plug 'StanAngeloff/php.vim'
Plug 'stephpy/vim-php-cs-fixer'
Plug 'phpactor/phpactor',  {'do': 'composer install', 'for': 'php'}
Plug 'camilledejoye/phpactor-mappings'
Plug 'SirVer/ultisnips'
Plug 'prabirshrestha/async.vim'
Plug 'honza/vim-snippets'
Plug 'tobyS/vmustache'
Plug 'tobyS/pdv'
Plug 'craigemery/vim-autotag'
Plug 'junegunn/vim-slash'
Plug 'airblade/vim-gitgutter'
Plug 'pangloss/vim-javascript'
Plug 'JamshedVesuna/vim-markdown-preview'
Plug 'tmux-plugins/vim-tmux'
Plug 'christoomey/vim-tmux-navigator'
Plug 'ryanoasis/vim-devicons'
Plug 'amiorin/vim-project'
Plug 'github/copilot.vim'

if has('nvim')

    Plug 'roxma/nvim-yarp'
    Plug 'ncm2/ncm2-highprio-pop'
    Plug 'ncm2/ncm2-ultisnips'
    Plug 'ncm2/ncm2'
    Plug 'ncm2/ncm2-bufword'
    Plug 'ncm2/ncm2-path'
    Plug 'phpactor/ncm2-phpactor'

endif


if filereadable(expand("~/.vimrc.bundles.local"))
    source ~/.vimrc.bundles.local
endif

call plug#end()

filetype plugin indent on

" ================ Markdown ================

let vim_markdown_preview_toggle=1
let vim_markdown_preview_github=1
let vim_markdown_preview_hotkey='<C-m>'
let vim_markdown_preview_browser='Brave'


" ================ Project ================

let g:project_enable_welcome = 0
let g:project_use_nerdtree = 1"

set rtp+=~/.vim/bundle/vim-project/
call project#rc()

" Project '~/.dotfiles', 'dotfiles'
"
" Project '~/Sites', 'sites'
" Project '~/Sites/voice', 'voice'
" Project '~/Sites/tempo', 'tempo'
"
" Project '~/dev', 'dev'


" ================ PHP ================
au BufWritePost *.php silent! !eval '[ -f ".git/hooks/ctags"  ] && .git/hooks/ctags' &

let g:pdv_template_dir = $HOME ."/.vim/bundle/pdv/templates_snip"
nnoremap <buffer> <C-'> :call pdv#DocumentWithSnip()<CR>

" Better docblock syntax highlighting
function! PhpSyntaxOverride()
    hi! def link phpDocTags  phpDefine
    hi! def link phpDocParam phpType
endfunction

augroup phpSyntaxOverride
    autocmd!
    autocmd FileType php call PhpSyntaxOverride()
augroup END

map <leader>u :PhpactorImportClass<CR>

" ================ Gist ================
" Setup github account config for webapi-vim
let g:gist_use_password_in_gitconfig = 1


" ================ FZF ================

" This is the default extra key bindings
let g:fzf_action = {
            \ 'ctrl-t': 'tab split',
            \ 'ctrl-x': 'split',
            \ 'ctrl-v': 'vsplit' }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

map <C-f> :Files<CR>
nnoremap <silent> <C-p> :Files<CR>
map <leader>b :Buffers<CR>
nnoremap <leader>g :Rg<CR>
nnoremap <leader>t :Tags<CR>
nnoremap <leader>m :Marks<CR>




let g:fzf_tags_command = 'ctags -R'
" Border color
let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset': 0.5, 'highlight': 'Todo', 'border': 'sharp' } }

let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline'
let $FZF_DEFAULT_COMMAND="rg --files --hidden"


" Customize fzf colors to match your color scheme
let g:fzf_colors =
            \ { 'fg':      ['fg', 'Normal'],
            \ 'bg':      ['bg', 'Normal'],
            \ 'hl':      ['fg', 'Comment'],
            \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
            \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
            \ 'hl+':     ['fg', 'Statement'],
            \ 'info':    ['fg', 'PreProc'],
            \ 'border':  ['fg', 'Ignore'],
            \ 'prompt':  ['fg', 'Conditional'],
            \ 'pointer': ['fg', 'Exception'],
            \ 'marker':  ['fg', 'Keyword'],
            \ 'spinner': ['fg', 'Label'],
            \ 'header':  ['fg', 'Comment'] }

"Get Files
command! -bang -nargs=? -complete=dir Files
            \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}), <bang>0)


" Get text in files with Rg
command! -bang -nargs=* Rg
            \ call fzf#vim#grep(
            \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
            \   fzf#vim#with_preview(), <bang>0)

" Ripgrep advanced
function! RipgrepFzf(query, fullscreen)
    let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
    let initial_command = printf(command_fmt, shellescape(a:query))
    let reload_command = printf(command_fmt, '{q}')
    let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
    call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

" Git grep
command! -bang -nargs=* GGrep
            \ call fzf#vim#grep(
            \   'git grep --line-number '.shellescape(<q-args>), 0,
            \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)

" ================ NERDTree ================

" Open NERDTree
nmap <leader>r :NERDTreeToggle<CR>

let g:nerdtree_sync_cursorline = 1
let NERDTreeShowHidded=1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1


" ================ Tagbar ================

" Open tagbar panel
nmap <leader>t :TagbarToggle<CR>

let g:tagbar_status_func = 'TagbarStatusFunc'

function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
    return lightline#statusline(0)
endfunction

let g:tagbar_type_css = {
            \ 'ctagstype' : 'Css',
            \ 'kinds'     : [
                \ 'c:classes',
                \ 's:selectors',
                \ 'i:identities'
                \ ]
                \ }

" ================ Syntastic ================

" Set checkers for syntastic:
let g:syntastic_javascript_checkers = ['eslint', 'jshint']
let g:syntastic_css_checkers = ['sasslint']
" let g:syntastic_python_checkers = ['pylint']j

" configure syntastic syntax checking to check on open as well as save
let g:syntastic_check_on_open=0
" let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
" let g:syntastic_eruby_ruby_quiet_messages = {"regex": "possibly useless use of a variable in void context"}

" Toggle Syntastic
nnoremap <F5> :SyntasticToggleMode<CR>

" ================ Emmet ================

let g:user_emmet_mode='a'
" let g:user_emmet_install_global = 0
" autocmd FileType html,css EmmetInstall


" ================ Lightline ================
let g:lightline = {
            \ 'colorscheme': 'gruvbox',
            \ 'active': {
                \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename'] ],
                \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
                \ },
                \ 'component_function': {
                    \   'fugitive': 'LightLineFugitive',
                    \   'filename': 'LightLineFilename',
                    \   'fileformat': 'MyFileformat',
                    \   'filetype': 'MyFiletype',
                    \   'fileencoding': 'LightLineFileencoding',
                    \   'mode': 'LightLineMode',
                    \ },
                    \ 'component_expand': {
                        \   'syntastic': 'SyntasticStatuslineFlag',
                        \ },
                        \ 'component_type': {
                            \   'syntastic': 'error',
                            \ },
                            \ 'separator': { 'left': '░', 'right': '░' },
                            \ 'subseparator': { 'left': '| ', 'right': ' |' }
                            \ }


function! LightLineModified()
    if &filetype == "help"
        return ""
    elseif &modified
        return "+"
    elseif &modifiable
        return ""
    else
        return ""
    endif
endfunction

function! LightLineReadonly()
    return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! LightLineFilename()
    let fname = expand('%:t')
    return fname == '__Tagbar__' ? g:lightline.fname :
                \ fname =~ '__Gundo\|NERD_tree' ? '' :
                \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
                \ &ft == 'unite' ? unite#get_status_string() :
                \ &ft == 'vimshell' ? vimshell#get_status_string() :
                \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
                \ ('' != fname ? fname : '[No Name]') .
                \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! MyFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! MyFileformat()
    return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

function! LightLineFugitive()
    try
        if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
            let mark = ''  " edit here for cool mark
            let _ = fugitive#head()
            return strlen(_) ? mark._ : ''
        endif
    catch
    endtry
    return ''
endfunction

function! LightLineFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
    return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
    let fname = expand('%:t')
    return fname == '__Tagbar__' ? 'Tagbar' :
                \ fname == '__Gundo__' ? 'Gundo' :
                \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
                \ fname =~ 'NERD_tree' ? 'NERDTree' :
                \ &ft == 'unite' ? 'Unite' :
                \ &ft == 'vimfiler' ? 'VimFiler' :
                \ &ft == 'vimshell' ? 'VimShell' :
                \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

" augroup AutoSyntastic
"   autocmd!
"   autocmd BufWritePost *.c,*.cpp call s:syntastic()
" augroup END
" function! s:syntastic()
"   SyntasticCheck
" endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0

" ================ NeoVim ================

let g:pymode_python = 'python3'
let g:python3_host_prog= '/opt/homebrew/bin/python3'

if has('nvim')
    " True colors
    " let $NVIM_TUI_ENABLE_TRUE_COLOR=1
    " set termguicolors

    set guicursor="i-ci:ver30-iCursor-blinkwait300-blinkon200-blinkoff150"

    " Exit terminal mode.
    tnoremap <leader>e <C-\><C-n>

    " Make a terminal split
    command! -nargs=* Spt :8sp term://zsh
    command! -nargs=* Vspt vsp term://zsh

    " Better scrolling
    set lazyredraw

    "
    " ================ NeoCompleteMe ================
    " suppress the annoying 'match x of y', 'The only match' and 'Pattern not
    " found' messages
    let g:AutoPairsMapCR=0
    let g:ncm2#auto_popup=1
    set completeopt=noselect,menuone,noinsert
    set shortmess+=c
    autocmd InsertEnter * call ncm2#enable_for_buffer()

    " CTRL-C doesn't trigger the InsertLeave autocmd . map to <ESC> instead.
    inoremap <c-c> <ESC>

    " When the <Enter> key is pressed while the popup menu is visible, it only
    " hides the menu. Use this mapping to close the menu and also start a new
    " line.
    inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")

    " Use <TAB> to select the popup menu:
    inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

    inoremap <silent> <expr> <CR> ncm2_ultisnips#expand_or("\<CR>", 'n')

    let g:UltiSnipsExpandTrigger		= "<Plug>(ultisnips_expand)"
    let g:UltiSnipsJumpForwardTrigger	= "<Tab>"
    let g:UltiSnipsJumpBackwardTrigger	= "<S-Tab>"
    let g:UltiSnipsRemoveSelectModeMappings = 0
    let g:UltiSnipsSnippetDirectories=["UltiSnips"]


    " wrap existing omnifunc
    " Note that omnifunc does not run in background and may probably block the
    " editor. If you don't want to be blocked by omnifunc too often, you could
    " add 180ms delay before the omni wrapper:
    "  'on_complete': ['ncm2#on_complete#delay', 180,
    "               \ 'ncm2#on_complete#omni', 'csscomplete#CompleteCSS'],

    " au User Ncm2Plugin call ncm2#register_source({
    "         \ 'name' : 'css',
    "         \ 'priority': 9,
    "         \ 'subscope_enable': 1,
    "         \ 'scope': ['css','scss'],
    "         \ 'mark': 'css',
    "         \ 'word_pattern': '[\w\-]+',
    "         \ 'complete_pattern': ':\s*',
    "         \ 'on_complete': ['ncm2#on_complete#omni', 'csscomplete#CompleteCSS'],
    "         \ })



    function! Multiple_cursors_before()
        call ncm2#lock('vim-multiple-cursors')
    endfunction

    function! Multiple_cursors_after()
        call ncm2#unlock('vim-multiple-cursors')
    endfunction

    " common
    call ncm2#override_source('ultisnips', {'priority': 10})

    " Deoplete
    " let g:deoplete#enable_at_startup=1
endif


" ================ Color Scheme ================
set background=dark
set guifont=Knack\ Nerd\ Font\ Complete:h14
set encoding=UTF-8
colorscheme gruvbox

" ================ Buftabline ================

" Change background color
" hi TabLineFill cterm=bold guifg=#333333 guibg=#282a36
" hi Tabline cterm=italic ctermfg=231 ctermbg=241 guifg=#666666 guibg=#282a36
" hi TabLineFill cterm=bold ctermfg=13 guifg=#fa0a92 guibg=#666666
"
" hi BufTabLineFill cterm=bold ctermfg=13 guifg=#fa0a92 guibg=#44475a
" hi BufTabLineCurrent cterm=bold ctermfg=13 guifg=#fa0a92 guibg=#44475a
" hi BufTabLineActive cterm=bold ctermfg=13 guifg=#fa0a92 guibg=#44475a


" ================ Local overwrites  ================

if filereadable($HOME . "/.vimrc.local")
    source ~/.vimrc.local
endif
